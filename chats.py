# chats.py
# Description: Interacts with OpenAI's API for generating chat-based completions. 
#              It includes functions to send a list of messages to OpenAI and 
#              process website content to answer specific questions.
import httpx
from config_loader import load_config

config = load_config("config/config.txt")

OPENAI_API_KEY = config.get("OPENAI_API_KEY")
MODEL_NAME = config.get("MODEL_NAME")

# Function: send_to_openai
# Description: sends a list of messages to the OpenAI API to generate a chat completion.
# Parameters:
#    - messages (list): list of dictionaries representing the chat history. 
#                       Each dictionary contains 'role' (e.g., system, user) and 'content'
# Returns:
#    - response (dict): the JSON response from the OpenAI API, or None in case of an error
async def send_to_openai(messages):
    url = "https://api.openai.com/v1/chat/completions"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {OPENAI_API_KEY}"
    }
    payload = {
        "model": MODEL_NAME,
        "messages": messages
    }
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(url, json=payload, headers=headers)
            response.raise_for_status()  # Raises an HTTPError for bad responses
            return response.json()
    except httpx.RequestError as e:
        print(f"An error occurred: {e}")
        return None


# Function: chat
# Description: generates a chat-based response from OpenAI based on website content and a question.
# Parameters:
#    - website_content (str): content scraped from a website to be used as context
#    - question (str): question to be answered based on the website content
# Returns:
#    - answer (str): response generated by OpenAI, or an error message if unsuccessful
async def chat(website_content: str, question: str) -> str:
    messages = [
        {"role": "system", "content": "You are a helpful assistant. Answer the question based on the given website content. Give short answers."},
        {"role": "system", "content": f"The following is content scraped from a website: {website_content}"},
        {"role": "user", "content": question}
    ]
    
    openai_response = await send_to_openai(messages)
    
    # check if the response contains a valid message and return it
    if openai_response and 'choices' in openai_response and len(openai_response['choices']) > 0:
        return openai_response['choices'][0]['message']['content']
    else:
        return "Sorry, I couldn't generate a response."

if __name__ == "__main__":
    import asyncio
    asyncio.run(chat())